{"version":3,"sources":["index.js"],"names":["refs","clock","document","getElementById","days","querySelector","hours","minutes","seconds","Timer","targetDate","onTick","intervalId","setInterval","currentTime","Date","now","deltaTime","time","getTimeComponents","pad","Math","floor","mins","secs","value","String","padStart","timer","updateClockface","textContent","start"],"mappings":";;;AAqDA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EArDA,QAAA,oBAEA,IAAMA,EAAO,CACXC,MAAOC,SAASC,eAAe,YAC/BC,KAAMF,SAASG,cAAc,uBAC7BC,MAAOJ,SAASG,cAAc,wBAC9BE,QAASL,SAASG,cAAc,uBAChCG,QAASN,SAASG,cAAc,wBAG5BI,EAAAA,WAC8B,SAAA,EAAA,GAAA,IAAA,EAAA,KAArBC,EAAAA,EAAAA,WAAYC,EAAAA,EAAAA,OAAS,EAAA,KAAA,GAMzB,EAAA,KAAA,QAAA,WACP,EAAKC,WAAaC,YAAY,WACtBC,IAAAA,EAAcC,KAAKC,MAEnBC,EADW,EAAKP,WACOI,EACvBI,EAAO,EAAKC,kBAAkBF,GACpC,EAAKN,OAAOO,IACX,OAZER,KAAAA,WAAaA,EACbE,KAAAA,WAAa,KACbD,KAAAA,OAASA,EAuClB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,oBA1BE,MAAA,SAAkBO,GAMT,MAAA,CAAEd,KALI,KAAKgB,IAAIC,KAAKC,MAAMJ,EAAQ,QAK1BZ,MAJD,KAAKc,IAAIC,KAAKC,MAAOJ,EAAQ,MAAyB,OAI9CK,KAHT,KAAKH,IAAIC,KAAKC,MAAOJ,EAAQ,KAAoB,MAGlCM,KAFf,KAAKJ,IAAIC,KAAKC,MAAOJ,EAAQ,IAAc,SAsB5D,CAAA,IAAA,MAjBE,MAAA,SAAIO,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,SAgBrC,EA3CMlB,GA+BAmB,EAAQ,IAAInB,EAAM,CACtBC,WAAY,IAAIK,KAAK,gBACrBJ,OAAQkB,IAGV,SAASA,EAAwC,GAAvBzB,IAAAA,EAAAA,EAAAA,KAAKE,EAAAA,EAAAA,MAAMiB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACxCxB,EAAKI,KAAK0B,YAAiB1B,GAAAA,OAAAA,GAC3BJ,EAAKM,MAAMwB,YAAiBxB,GAAAA,OAAAA,GAC5BN,EAAKO,QAAQuB,YAAiBP,GAAAA,OAAAA,GAC9BvB,EAAKQ,QAAQsB,YAAiBN,GAAAA,OAAAA,GAGhCI,EAAMG","file":"src.84ee5bf4.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\nconst refs = {\n  clock: document.getElementById('#timer-1'),\n  days: document.querySelector('[data-value=\"days\"]'),\n  hours: document.querySelector('[data-value=\"hours\"]'),\n  minutes: document.querySelector('[data-value=\"mins\"]'),\n  seconds: document.querySelector('[data-value=\"secs\"]'),\n}\n\nclass Timer {\n  constructor({targetDate, onTick}) {\n    this.targetDate = targetDate;\n    this.intervalId = null;\n    this.onTick = onTick;\n  }\n\n  start  = () => {\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const startTime= this.targetDate;\n      const deltaTime = startTime- currentTime;\n      const time = this.getTimeComponents(deltaTime);\n      this.onTick(time);\n    }, 1000);\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst timer = new Timer({\n  targetDate: new Date('Jan 01, 2022'),\n  onTick: updateClockface,\n});\n\nfunction updateClockface({days,hours,mins,secs}) {\n  refs.days.textContent = `${days}`;\n  refs.hours.textContent = `${hours}`;\n  refs.minutes.textContent = `${mins}`;\n  refs.seconds.textContent = `${secs}`;\n}\n\ntimer.start()"]}