{"version":3,"sources":["index.js"],"names":["refs","clock","document","querySelector","Timer","targetDate","onTick","intervalId","currentTime","Date","now","setInterval","startTime","deltaTime","time","getTimeComponents","days","pad","Math","floor","hours","mins","secs","value","String","padStart","timer","updateClockface","textContent","start"],"mappings":";;;AAwDA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAxDA,QAAA,oBAEA,IAAMA,EAAO,CACXC,MAAOC,SAASC,cAAc,WAI1BC,EAAAA,WAiDN,SAAA,IAAA,EAAA,KAAA,GAAA,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,cAhDE,MAAA,SAAkC,GAApBC,IAAAA,EAAAA,EAAAA,WAAWC,EAAAA,EAAAA,OAClBD,KAAAA,WAAaA,EACbE,KAAAA,WAAa,KACbD,KAAAA,OAASA,IA6ClB,CAAA,IAAA,QA1CE,MAAA,WAAQ,IAAA,EAAA,KACAE,EAAcC,KAAKC,MAClBH,KAAAA,WAAaI,YAAa,WAEvBC,IACAC,EADY,EAAKR,WACOG,EACxBM,EAAO,EAAKC,kBAAkBF,GACpC,EAAKP,OAAOQ,IACZ,OAkCR,CAAA,IAAA,oBA/BE,MAAA,SAAkBA,GAMT,MAAA,CAACE,KALK,KAAKC,IAAIC,KAAKC,MAAML,EAAQ,QAK5BM,MAJC,KAAKH,IAAIC,KAAKC,MAAOL,EAAQ,MAAyB,OAIjDO,KAHN,KAAKJ,IAAIC,KAAKC,MAAOL,EAAQ,KAAoB,MAGtCQ,KAFX,KAAKL,IAAIC,KAAKC,MAAOL,EAAQ,IAAc,SA2B5D,CAAA,IAAA,MAtBE,MAAA,SAAIS,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAE,SAqBpC,EAjDMrB,GAgCAsB,EAAQ,IAAItB,EAAM,CACtBC,WAAY,IAAII,KAAK,gBACrBH,OAAQqB,IAMV,SAASA,EAAwC,GAAvBX,IAAAA,EAAAA,EAAAA,KAAKI,EAAAA,EAAAA,MAAMC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,KACxCtB,EAAKC,MAAM2B,YAAiBZ,GAAAA,OAAAA,EAAQI,KAAAA,OAAAA,EAASC,KAAAA,OAAAA,EAAQC,KAAAA,OAAAA,GAJvDI,EAAMG","file":"src.fec7b8e1.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\nconst refs = {\n  clock: document.querySelector('.timer'),\n}\n\n\nclass Timer {\n  consrtuctor ({targetDate,onTick}) {\n    this.targetDate = targetDate;\n    this.intervalId = null;\n    this.onTick = onTick;\n  }\n\n  start() {\n    const currentTime = Date.now();\n      this.intervalId = setInterval (() => {\n        \n        const startTime = this.targetDate;\n        const deltaTime = startTime - currentTime;\n        const time = this.getTimeComponents(deltaTime);\n        this.onTick(time);\n      },1000);\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n  \n    return {days,hours,mins,secs}\n  }\n\n  pad(value) {\n    return String(value).padStart(2,'0');\n  }\n};\n\nconst timer = new Timer({\n  targetDate: new Date('Jul 17, 2021'),\n  onTick: updateClockface,\n});\n\ntimer.start();\n\n\nfunction updateClockface({days,hours,mins,secs}) {\n  refs.clock.textContent = `${days}:${hours}:${mins}:${secs}`\n}\n\n// function updateClockface({ days ='00', hours = '00', mins ='00', secs='00' }) {\n//   refs.days.textContent = `${days}`;\n//   refs.hours.textContent = `${hours}`;\n//   refs.minutes.textContent = `${mins}`;\n//   refs.seconds.textContent = `${secs}`;\n// }"]}